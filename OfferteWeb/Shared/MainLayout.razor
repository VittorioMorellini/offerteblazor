@using System.Security.Claims
@inherits LayoutComponentBase

@inject NavigationManager navigationManager;
@inject IDialogService DialogService
@inject IJSRuntime _jsRuntime
@inject IAgenteService agenteService
@inject ProtectedSessionStorage _sessionStorage

<CascadingValue Value="this">
    <ErrorBoundary @ref="ErrorBoundary">
        <ChildContent>
            <MudThemeProvider @ref="@_mudThemeProvider" Theme="theme" />
            <MudDialogProvider />
            <MudSnackbarProvider />
            <RadzenDialog />

            <MudLayout title="Offerte Web">
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="backdiv" style="display: flex; flex-direction: column; gap: 12px; justify-content: center; align-items: center; justify-items: center;
                                    height: 100vh; top: 0; left: 0; width: 100vw; height: 100vh; position: absolute;
                                    background-size: 100vw 100vh; background-image: linear-gradient(rgba(255,255,255,0.5), rgba(255,255,255,0.5)), url(images/background.jpg); ">
                        <img src="/images/logo.png" style="max-width: 420px;" />
                        <OfferteWeb.Pages.Identity.RedirectToLogin />
                        @*
                            <MudButton Class="font-weight-bold" EndIcon="@Icons.Filled.Login" Variant="Variant.Filled" Href="/Identity/Login" Color="Color.Primary">Accedi</MudButton>
                            <form id="account" method="post">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="form-floating m-lg-3">
                                <input asp-for="Input.Username" class="form-control" autocomplete="username" aria-required="true" />
                                <label asp-for="Input.Username" class="form-label">Username</label>
                                <span asp-validation-for="Input.Username" class="text-danger"></span>
                            </div>
                            <div>
                                <br />
                            </div>
                            <div class="form-floating m-lg-3">
                                <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                                <label asp-for="Input.Password" class="form-label">Password</label>
                                <span asp-validation-for="Input.Password" class="text-danger"></span>
                            </div>
                            <MudButton Class="font-weight-bold" EndIcon="@Icons.Filled.Login" Variant="Variant.Filled" OnClick="() => handleLogin()" Color="Color.Primary">Accedi</MudButton>
                            <img src="/images/logo.png" style="max-width: 420px;" />
                            </form>
                        *@
                        @* <OfferteWeb.Pages.Identity.RedirectToLogin /> *@
                            @* Href="/Identity/Login"
                            <MudButton Class="font-weight-bold" Color="Color.Primary" OnClick="() => handleLogin()" EndIcon="@Icons.Filled.Login">Sign In</MudButton>
                            <div class="login">
                                <div class="form-group">
                                    <label> Username </label>
                                    <MudTextField Variant="Variant.Outlined" T="string" @bind-Value="Username"></MudTextField>
                                </div>
                                <div class="form-group">
                                    <label>password</label>
                                    <MudTextField Variant="Variant.Outlined" T="string" InputType="InputType.Password" @bind-Value="Password"></MudTextField>
                                </div>
                                <div>
                                    <hr/>
                                </div>
                                <MudButton Color="Color.Primary" OnClick="HandleLogin" Class="font-weight-bold" EndIcon="@Icons.Material.Filled.Login">Sign In</MudButton>
                            </div>
                            *@
                        </div>
                        <div class="fixed-bottom text-center">
                            <img class="m-auto" alt="Techboard" src="https://www.techboardgroup.com/images/logo_tb_catena.png" style="max-width: 150px;">
                        </div>
                    </NotAuthorized>
                    <Authorizing>
                        Please wait while the authorization going on ...
                    </Authorizing>
                    <Authorized>
                        @* <StateInitializer></StateInitializer> *@
                        <MudAppBar Elevation="0" Style="z-index:1000 !important">
                            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
                            <BackButton MethodForNavigationCheck="BackNavigation"></BackButton>
                            <MudSpacer/>
                            <MudButton Variant="Variant.Text" Color="Color.Transparent" @onclick="(() => OpenDialogForUserEdit())">
                                <LoginViewer @ref="loginViewer" User="agente"></LoginViewer>
                            </MudButton>
                        </MudAppBar>
                        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
                            <MudDrawerHeader>
                                <img src="/images/logo_layout.png" height="60px"/>
                            </MudDrawerHeader>
                            <NavMenu Role="@Role.ADMIN" MethodForNavigationCheck="((e)=> NavigationChecking(e, false))" />
                        </MudDrawer>
                        <MudMainContent>
                            <div style="margin-left:5px; margin-right:5px">
                                @Body
                            </div>
                        </MudMainContent>
                    </Authorized>
                </AuthorizeView>
            </MudLayout>
        </ChildContent>
        <ErrorContent>
            <AuthorizeView Context="authContext">
                <NotAuthorized>
                    <Error403></Error403>
                </NotAuthorized>
                <Authorized>
                    <MudMainContent>
                        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex justify-center pt-16">
                            <ErrorDispatcher Exception="context" RecoverRequest="() => ErrorBoundary?.Recover()"/>
                        </MudContainer>
                    </MudMainContent>
                </Authorized>
            </AuthorizeView>
        </ErrorContent>
    </ErrorBoundary>
</CascadingValue>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Agente agente = new();
    bool _drawerOpen = true;
    private MudThemeProvider? _mudThemeProvider;
    public bool IsClicked = false;
    private LoginViewer loginViewer;

    private ErrorBoundary? ErrorBoundary;

    MudTheme theme = new MudTheme()
    {
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "200px",
        },
        Palette = new Palette()
        {
            Primary = "#006F98",
            Secondary = "#0B2E4F",
            AppbarBackground = "#0B2E4F",
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontSize = "0.75rem"
            },
            Body1 = new Body1()
            {
                FontSize = "0.85rem"
            },
            Body2 = new Body2()
            {
                FontSize = "0.8rem"
            },
            Button = new Button()
            {
                FontSize = "0.8rem"
            }
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();
    // }

    protected override async Task OnInitializedAsync()
    {
        var auth = await authenticationStateTask;
        if (auth != null)
        {
            var identity = auth.User.Identity as ClaimsIdentity;
            agente.RagioneSociale = identity.FindFirst("FullName")?.Value;
            agente.Username = identity.FindFirst("Username")?.Value;
            agente.Id = Convert.ToInt64(identity.FindFirst("Id")?.Value);
            agente.Nome = identity.FindFirst(ClaimTypes.Name)?.Value;
            agente.Cognome = identity.FindFirst(ClaimTypes.Surname)?.Value;
            agente.Role = identity.FindFirst(ClaimTypes.Role)?.Value;
            agente.Mail = identity.FindFirst(ClaimTypes.Email)?.Value;
            //StateHasChanged();
        }
        await base.OnInitializedAsync();
    }
    
    private async Task OpenDialogForUserEdit()
    {
        var parameter = new DialogParameters { ["User"] = agente};

        var dialog = DialogService.Show<DialogUserEdit>($"Utente {agente?.RagioneSociale}", parameter, new DialogOptions() { FullWidth = false, MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await loginViewer.LoadAvatar();
        }
    }

    public void GoBack()
    {
        _jsRuntime.InvokeVoidAsync("history.go", -1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    // private void BackNavigation()
    // {
    //     NavigationChecking("", true);
    // }

    private async Task NavigationChecking(string indirizzo, bool backButtonClick = false)
    {
        var currentLocation = navigationManager.Uri;
        if (currentLocation.Contains("/edit") || currentLocation.Contains("/new"))
        {
            var parameters = new DialogParameters();
            parameters.Add("Text", "Eventuali modifiche non salvate andranno perse");
            var dialog = DialogService.Show<DialogConfirm>("Sicuro di voler uscire?", parameters);
            var result = await dialog.Result;
            if (result.Cancelled)
            {
                return;
            }

        }
        if (backButtonClick)
        {
            GoBack();
        }
        else
        {
            navigationManager.NavigateTo(indirizzo, true);
        }
        StateHasChanged();
    }
}