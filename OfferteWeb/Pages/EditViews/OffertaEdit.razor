@page "/offerta/edit/{Id:long}"
@page "/offerta/new"

@using Microsoft.EntityFrameworkCore.Storage.ValueConversion
@using OfferteWeb.Components.SearchComponents

@inherits BaseEditPage<Offerta>;
@inject HttpClient httpClient
@inject IDialogService dialogService;
@inject IMailService mailService
@inject IOffertaService offertaService
@inject IOffertaRigaService offertaRigaService
@inject IAgenteService agenteService;
@inject IGenericEntityService genericService;
@inject NavigationManager navigationManager;
@inject ISnackbar snackbar;
@inject EntitiesFactory factory;
@inject IFileService fileService;
@inject IJSRuntime jsRuntime;
@inject ICliComService clienteService;
@inject ICirComService cirComService;
@inject AppConfiguration appConfiguration;

<Loading IsLoading=@IsLoading></Loading>
<InputFile id="fileInput" OnChange="UploadFiles" hidden multiple></InputFile>
@if (Item != null)
{
    <OfferteWeb.Components.EditPageHeader Modifica="@InModifica" Entita="@UiEntityName"></OfferteWeb.Components.EditPageHeader>
    <MudForm @ref="form" @bind-IsValid="@isValid" @bind-Errors="@errors">
        <MudGrid Spacing="1">
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.Id" Label="Numero offerta"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="6">
                <div style="display:flex; margin-bottom:10px;flex-direction:row; align-items: center; align-content: center">
                    <div style="display:flex; flex-direction:row;align-items:center">
                        <MudText Style="margin-right:10px" Typo="Typo.h5">Utente</MudText>
                        <MudSelect Style="max-width: 300px;flex-grow:0" Clearable Variant=Variant.Outlined ToStringFunc="@((Agente e)=> $"{e?.Nome} {e?.Cognome}")" T="Agente" Label="Utente" MultiSelection="false" Value="SelectedUtente">
                            @foreach (var r in Redattori)
                            {
                                <MudSelectItem T="Agente" Value="@r">@($"{r.Nome} {r.Cognome}")</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                    <div>
                        Dallo stato mail: @State?.User?.Mail
                    </div>
                </div>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.Listino" Label="Listino"></MudTextField>
            </MudItem>
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" style="width: calc(100%); min-height: 600px">
                <MudTabPanel Text="Dati generali">
                    <div style="display: flex; flex-direction: column">
                        <div style="display: flex">
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <div style="display:flex; margin-bottom:10px;flex-direction:column">
                                    <div style="display:flex; flex-direction:row;align-items:center">
                                        <MudText Style="margin-right:10px" Typo="Typo.h5">Agente</MudText>
                                        <MudSelect Style="max-width: 300px;flex-grow:0" Clearable Variant=Variant.Outlined ToStringFunc="@((Agente e)=> $"{e?.Nome} {e?.Cognome}")" T="Agente" Label="Agente" MultiSelection="false" Value="SelectedAgente" ValueChanged="RedattoreAddizionaleChanged">
                                            @foreach (var r in Redattori)
                                            {
                                                <MudSelectItem T="Agente" Value="@r">@($"{r.Nome} {r.Cognome}")</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </div>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudDatePicker Variant="Variant.Outlined" Date="Item.DataOfferta" DateChanged="GetDataOfferta" Label="Data Offerta"></MudDatePicker>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.RevisioneDocumento" Label="Revisione"></MudTextField>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.MatricolCliente" Label="Matricola"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="CirCom"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" 
                                    Label="Codice interno"
                                    Value="@SelectedCircuito"
                                    ValueChanged="CircuitoChanged"
                                    SearchFunc="@SearchCircuito"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((CirCom e)=> e?.CodiceInterno)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Accedere a ricerca circuiti" Icon="@Icons.Filled.Search" OnClick="OpenCircuiti"></MudIconButton>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="CliCom"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" Label="Cliente"
                                    Value="@SelectedCustomer"
                                    ValueChanged="CustomerChanged"
                                    SearchFunc="@SearchCustomer"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((CliCom e)=> e?.RagioneSociale)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Bottone per accedere a ricerca clienti" Icon="@Icons.Filled.Search" OnClick="OpenCustomers"></MudIconButton>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect Clearable Variant="Variant.Outlined" @bind-Value="Item.IdValuta" Label="Valuta">
                                    @if (Valutas != null)
                                    {
                                        @foreach (var v in Valutas)
                                        {
                                            <MudSelectItem T="long?" Value="@v.Id">@v.DescrBreve</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.FormaDiPagamento" Label="Forma di pagamento"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.IdTrasporto" Label="Trasporto"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.CondizioniResa" Label="Condizioni di resa"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudDatePicker Variant="Variant.Outlined" Date="Item.DataScadenzaOfferta" DateChanged="GetDataScadenza" Label="Scadenza Offerta"></MudDatePicker>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="GenericEntity"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" Label="Spessore materiale"
                                    Value="@SelectedSpessoreMateriale"
                                    ValueChanged="SpessoreMaterialeChanged"
                                    SearchFunc="@SearchGenericMateriale"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Accedere a ricerca Sepssore" Icon="@Icons.Filled.Search" OnClick=@(() => OpenSpessoreMateriale("Seleziona uno spessore Materiale", "SpessoreMateriale"))></MudIconButton>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="GenericEntity"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" 
                                    Label="Spessore rame"
                                    Value="@SelectedSpessoreRame"
                                    ValueChanged="SpessoreRameChanged"
                                    SearchFunc="@SearchGenericRame"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Accedere a ricerca Sepssore" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenSpessoreRame("Seleziona uno spessore base CU", "SpessRame"))></MudIconButton>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="GenericEntity"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" 
                                    Label="Spessore inner Layer"
                                    Value="@SelectedSpessoreInnerLayer"
                                    ValueChanged="SpessoreInnerChanged"
                                    SearchFunc="@SearchGenericMateriale"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Accedere a ricerca Sepssore" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenSpessoreMateriale("Seleziona uno spessore Inner Layer", "SpessoreInnerLayer"))></MudIconButton>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <div style="display:flex; flex-direction:row;align-items: center;">
                                    <MudAutocomplete T="GenericEntity"
                                    MinCharacters="3"
                                    MaxItems="20"
                                    Immediate="false" 
                                    Label="Spessore CU BASE inner"
                                    Value="@SelectedSpessoreRameInner"
                                    ValueChanged="SpessoreRameInnerChanged"
                                    SearchFunc="@SearchGenericRame"
                                    Variant="Variant.Outlined" 
                                    ShowProgressIndicator="true"
                                    AdornmentIcon="null"
                                    ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                        <NoItemsTemplate>
                                            <MudText Align="Align.Center" Class="px-4 py-1">
                                                Nessun elemento trovato
                                            </MudText>
                                        </NoItemsTemplate>
                                    </MudAutocomplete>
                                    <MudIconButton aria-label="Accedere a ricerca Sepssore" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenSpessoreRame("Seleziona uno spessore cu Base Inner", "SpessRameInnerLayer"))></MudIconButton>
                                </div>
                            </MudItem>
                        </div>
                        <div style="display: flex; gap: 1rem; align-items: center;">
                            <MudItem xs="12" sm="6" md="4" lg="4" style="display: flex">
                                <div style="display: flex; align-items: center"><label>Dim Singolo/Cartella</label></div>
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.DimXfigura" Label=""></MudNumericField>
                                <span style="display: flex; align-items: center">X</span>
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.DimYfigura" Label=""></MudNumericField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4" lg="4" style="display: flex">
                                <div style="display: flex; align-items: center"><label>Numero circuiti per cartella</label></div>
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.NumCircuitiXcart" Label=""></MudNumericField>
                                <span style="display: flex; align-items: center">X</span> 
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.NumCircuitiYcart" Label=""></MudNumericField>
                            </MudItem>
                            <MudAutocomplete T="GenericEntity"
                            MinCharacters="3"
                            MaxItems="20"
                            Immediate="false" Label="Numero strati"
                            Value="@SelectedNumeroStrati"
                            ValueChanged="NumeroStratiChanged"
                            SearchFunc="@SearchGenericNumeroStrati"
                            Variant="Variant.Outlined" 
                            ShowProgressIndicator="true"
                            AdornmentIcon="null"
                            ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                <NoItemsTemplate>
                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                        Nessun elemento trovato
                                    </MudText>
                                </NoItemsTemplate>
                            </MudAutocomplete>
                            <MudIconButton aria-label="Accedere a ricerca numero strati" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenStrati("Seleziona un numero strati"))></MudIconButton>
                        </div>
                        <div style="display: flex">
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect Clearable Required Variant="Variant.Outlined" @bind-Value="Item.StatoOfferta" Label="Stato" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem T=byte? Value="@StatoOfferta.Inserita.Item1">@StatoOfferta.Inserita.Item2</MudSelectItem>
                                    <MudSelectItem T=byte? Value="@StatoOfferta.Accettata.Item1">@StatoOfferta.Accettata.Item2</MudSelectItem>
                                    <MudSelectItem T=byte? Value="@StatoOfferta.Rifiutata.Item1">@StatoOfferta.Rifiutata.Item2</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </div>
                        <div style="display: flex; align-items: center">
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect Clearable Variant="Variant.Outlined" @bind-Value="Item.IdMaterialeTec" Label="Laminato base">
                                    @if (Materialis != null)
                                    {
                                        @foreach (var mt in Materialis)
                                        {
                                            <MudSelectItem T="long?" Value="@mt.Id">@mt.Descrizione</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="@Item.ComponentiSmd" Label="Componenti Smd"></MudNumericField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2" lg="2">
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.ComponentiPth" Label="Pth"></MudNumericField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2" lg="2">
                                <MudCheckBox @bind-Checked="Item.Attrezzatura" Label="Attrezzatura fotografica" LabelPosition="LabelPosition.Start"></MudCheckBox>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2" lg="2">
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.AttrezzaturaAdd" Label="Variazione attrezzatura"></MudNumericField>
                            </MudItem>
                        </div>
                        <div style="display: flex; align-items: center">
                            <MudAutocomplete T="GenericEntity"
                            MinCharacters="3"
                            MaxItems="20"
                            Immediate="false" Label="Tipologia prodotto"
                            Value="@SelectedTipologiaProdotto"
                            ValueChanged="TipologiaProdottoChanged"
                            SearchFunc="@SearchGenericTipologiaProdotto"
                            Variant="Variant.Outlined"
                            ShowProgressIndicator="true"
                            AdornmentIcon="null"
                            ToStringFunc="@((GenericEntity e) => e==null ? null : e?.Descrizione)">
                                <NoItemsTemplate>
                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                        Nessun elemento trovato
                                    </MudText>
                                </NoItemsTemplate>
                            </MudAutocomplete>
                            <MudIconButton aria-label="Accedere a ricerca tipologia prodotto" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenTipologiaProdotto("Seleziona tipologia prodotto"))></MudIconButton>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.DiametroMinForo" Label="Diametro minimo foro"></MudNumericField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudCheckBox @bind-Checked="Item.Setup" Label="Setup" LabelPosition="LabelPosition.Start"></MudCheckBox>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudNumericField Required Variant="Variant.Outlined" @bind-Value="Item.MinutiSetup" Label="Minuti setup"></MudNumericField>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudAutocomplete T="GenericEntity"
                            MinCharacters="3"
                            MaxItems="20"
                            Immediate="false" Label="Finitura superficiale"
                            Value="@SelectedFinituraSuperficiale"
                            ValueChanged="FinituraSuperficialeChanged"
                            SearchFunc="@SearchGenericTipologiaProdotto"
                            Variant="Variant.Outlined"
                            ShowProgressIndicator="true"
                            AdornmentIcon="null"
                            ToStringFunc="@((GenericEntity e) => e?.Descrizione)">
                                <NoItemsTemplate>
                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                        Nessun elemento trovato
                                    </MudText>
                                </NoItemsTemplate>
                            </MudAutocomplete>
                            <MudIconButton aria-label="Accedere a ricerca finitura superficiale" Icon="@Icons.Filled.Search" OnClick=@((MouseEventArgs e) => OpenFinituraSuperficiale("Seleziona finitura superficiale", null))></MudIconButton>
                        </div>
                        <div style="display: flex">
                            <MudItem xs=12 sm=12 md=6>
                                <div style="display:flex; justify-content: flex-start; column-gap:5vh">
                                    <MudCheckBox @bind-Checked="Item.FineLine" Label="Fineline" LabelPosition="LabelPosition.Start"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="@Item.PressFit" Label="PressFit" LabelPosition="LabelPosition.Start"></MudCheckBox>
                                </div>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudItem xs=12 sm=12 md=6>
                                <div style="display:flex; column-gap:5vh">
                                    <MudCheckBox @bind-Checked="Item.MicroForatura" Label="Microforature" LabelPosition="LabelPosition.Start"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="Item.ImpedenzaControllata" Label="Impedenza controllata" LabelPosition="LabelPosition.Start"></MudCheckBox>
                                </div>
                            </MudItem>
                        </div>
                        <div style="display: flex; justify-content: flex-start">
                            <MudCheckBox @bind-Checked="Item.TestSondeMobili" Label="Test sondo mobili" LabelPosition="LabelPosition.Start"></MudCheckBox>
                        </div>
                        <div>
                            <MudItem xs="12" sm="6" md="3">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Item.Note" Label="Note"></MudTextField>
                            </MudItem>
                        </div>
                        <div style="display: flex">
                            <MudPaper Style="padding:10px; width:100%" Outlined="true" Elevation="1">
                                <MudItem xs="12" sm="12" md="6">
                                    <div style="display:flex; margin-bottom:10px">
                                        <MudText Style="margin-right:10px" Typo="Typo.h5">Allegati (Gerber file)</MudText>
                                        @if (loadingFile)
                                        {
                                            <MudProgressCircular Indeterminate></MudProgressCircular>
                                        }
                                        else
                                        {
                                            <MudButton HtmlTag="label"
                                            Disabled=@(Item?.Id == 0)
                                            Size="Size.Small"
                                            Variant="Variant.Filled"
                                            Color="Color.Primary"
                                            StartIcon="@Icons.Filled.CloudUpload"
                                            for="fileInput">
                                                Carica
                                            </MudButton>
                                        }
                                    </div>
                                </MudItem>
                            </MudPaper>
                        </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Far east">
                    <MudText>Content Far east</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Righe offerta">
                    <MudPaper Style="padding:10px; width:100%" Outlined="true" Elevation="1">
                        <MudItem xs="12">
                            <div style="display:flex; margin-bottom:10px">
                                <MudText Style="margin-right:10px" Typo="Typo.h5">Righe offerta</MudText>
                                <MudButton HtmlTag="label"
                                Disabled=@(Item?.Id == 0)
                                Size="Size.Small"
                                Variant="Variant.Filled"
                                Color="Color.Secondary"
                                StartIcon="@Icons.Filled.Link"
                                OnClick="(() => OpenRowOfferta(0))">
                                    Inserisci una riga
                                </MudButton>
                            </div>
                            <MudTable @ref="tableRelated" T="OffertaRiga" Dense ServerData="@(new Func<TableState, Task<TableData<OffertaRiga>>>(RigaReload))" Hover="true" RowsPerPage="10" Bordered="true" Striped="true">
                                <HeaderContent>
                                    <MudTh>Quantità</MudTh>
                                    <MudTh>Campione</MudTh>
                                    <MudTh>Giorni di consegna</MudTh>
                                    <MudTh>Data quotazione</MudTh>
                                    <MudTh></MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>
                                        <MudText>@context.Quantita</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.Campione</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.GiorniDiConsegna</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.DataQuotazione</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="(() => DeleteRowOfferta(context.Id))">Elimina</MudButton>
                                    </MudTd>
                                    <MudTd>
                                        <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="(()=> OpenRowOfferta(context.Id))">Modifica</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[]{15, 50, 100}" />
                                </PagerContent>
                                <NoRecordsContent>
                                    Nessun elemento presente
                                </NoRecordsContent>
                            </MudTable>
                        </MudItem>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="Tab Disabled" Disabled="true">
                    <MudText>Content disabled</MudText>
                </MudTabPanel>
            </MudTabs>
        </MudGrid>
        <MudGrid Style="padding-bottom:50px" Spacing="1">
            <MudItem xs=12 sm=6 md=3>
                <MudTextField Variant="Variant.Outlined" Disabled=true @bind-Value="Item.IdUtente" Label="Utente Inserimento"></MudTextField>
            </MudItem>
            <MudItem xs=12 sm=6 md=3>
                <MudTextField Variant="Variant.Outlined" Disabled=true @bind-Value="Item.DataUltimaModifica" Label="Data ultima modifica"></MudTextField>
            </MudItem>
        </MudGrid>
        <OfferteWeb.Components.EditPageFooter Modifica="@InModifica" Entita="@UiEntityName" DeleteClicked="DeleteItem" AddClicked="AddItem" UpdateClicked="UpdateOfferta"></OfferteWeb.Components.EditPageFooter>
    </MudForm>
}
@code {
    private readonly string UiEntityName = "Offerta";
    private string? newTag;
    //private IEnumerable<TipoProdotto> TipoProdottos { get; set; }
    private IEnumerable<Materiale> Materialis { get; set; }
    private IEnumerable<Valuta> Valutas { get; set; }
    private bool loadingFile = false;
    //MudTextField<string>? tagAddTextField;
    Agente? SelectedAgente;
    Agente? SelectedUtente;
    GenericEntity? SelectedSpessoreMateriale;
    GenericEntity? SelectedSpessoreRame;
    GenericEntity? SelectedSpessoreInnerLayer;
    GenericEntity? SelectedSpessoreRameInner;
    GenericEntity? SelectedNumeroStrati;
    GenericEntity? SelectedTipologiaProdotto;
    GenericEntity? SelectedFinituraSuperficiale;
    MudTable<OffertaRiga>? tableRelated;
    IEnumerable<Agente> Redattori { get; set; }
    CliCom? SelectedCustomer;
    CirCom? SelectedCircuito;

    protected override async Task OnInitializedAsync()
    {
        httpClient.BaseAddress = new Uri(navigationManager.BaseUri);
        searchService = offertaService;
        updateService = offertaService;
        Redattori = agenteService.Search(new AgenteSearchModel());
        //Console.WriteLine("Utente: " + State?.User?.Username);
        if (InModifica == true)
        {
            Item = offertaService.Find(Id);
            SelectedAgente = Redattori.Where(x => x.Id == Item.IdAgente).FirstOrDefault();
            SelectedUtente = Redattori.Where(x => x.Id == Item.IdUtente).FirstOrDefault();

            genericService.KeyName = "Id";
            genericService.DescriptionName = "Descrizione";
            genericService.TableName = "SpessoreMateriale";
            if (Item.SpessoreFinale.HasValue)
                SelectedSpessoreMateriale = await genericService.FindAsync(Item.SpessoreFinale.GetValueOrDefault());

            if (Item.SpessoreInnerLayer.HasValue)
                SelectedSpessoreInnerLayer = await genericService.FindAsync(Item.SpessoreInnerLayer.GetValueOrDefault());
            genericService.TableName = "SpessoreRame";
            SelectedCustomer = clienteService.Find(Item.IdCliente);

            // SelectedSpessoreRame.Id = Item.SpessRame.GetValueOrDefault();
            // SelectedSpessoreRameInner.Id = Item.SpessoreInnerLayer.GetValueOrDefault();

        }
        else
        {
            Item = CreateInstance();
            Item.IdAgente = State.User != null ? State.User.Id : 0;
            Item.StatoOfferta = StatoOfferta.Inserita.Item1;
        }
        await base.OnInitializedAsync();
    }

    private async Task<TableData<Offerta>> ServerReload(TableState state)
    {
        await SetLoading(true);
        PagerModel pm = new();
        pm.Take = state.PageSize;
        pm.Skip = state.Page * state.PageSize;
        OffertaSearchModel model = new();
        model.Id = Item.Id;
        var pagedInfo = offertaService.SearchPaged(model, false);
        var categoriesPaged = pagedInfo.Item1;
        var totalItems = pagedInfo.Item2;
        await SetLoading(false);
        return new TableData<Offerta>() { TotalItems = totalItems, Items = categoriesPaged };
    }

    private async Task<TableData<OffertaRiga>> RigaReload(TableState state)
    {
        OffertaRigaSearchModel model = new();
        model.IdOfferta = Item.Id;

        var righe = offertaRigaService.SearchPaged(model, false);

        return new TableData<OffertaRiga>() { TotalItems = righe.Item2, Items = righe.Item1 }; ;
    }

    private void GetDataOfferta(DateTime? value)
    {
        Item.DataOfferta = value ?? DateTime.Now;
    }

    private void GetDataScadenza(DateTime? value)
    {
        Item.DataScadenzaOfferta = value ?? DateTime.UtcNow;
    }

    private void OpenOfferta(long newId)
    {
        navigationManager.NavigateTo($"/offerta/edit/{newId}", true);
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        await SetLoading(true);
        loadingFile = true;
        try
        {
            //         foreach (var file in e.GetMultipleFiles())
            //         {
            //             PostAttachment? myDocument = factory.Create<PostAttachment>();
            //             var extension = Path.GetExtension(file.Name);
            //             var fileName = Regex.Replace(file.Name, @"[^\w\.@-]", "", RegexOptions.None, TimeSpan.FromSeconds(1.5)).Replace(" ", "_");
            //             myDocument.Name = fileName;
            //             myDocument.PostId = Item.Id;
            //             var externalId = await postAttachmentService.Add(myDocument);

            //             byte[] fileContent;
            //             var stream = file.OpenReadStream(Int64.MaxValue);
            //             MemoryStream ms = new MemoryStream();
            //             await stream.CopyToAsync(ms);
            //             stream.Close();
            //             fileContent = ms.ToArray();

            //             var result = await azureFileService.WriteFile(externalId, fileContent, extension);
            //             if (result)
            //             {
            //                 Item!.PostAttachment.Add(myDocument);
            //                 await UpdateOfferta();
            //             }
            //             else
            //             {
            //                 snackbar.Add("Errore caricamento file", Severity.Error);
            //             }
            //         }
        }
        finally
        {
            loadingFile = false;
            await SetLoading(false);
        }
    }

    private async Task OpenRowOfferta(long idRow)
    {
        OffertaRiga riga = new OffertaRiga();
        string title = "Inserisci";
        if (idRow != 0)
        {
            title = "Modifica";
        }
        var parameters = new DialogParameters { ["Id"] = idRow };
        var dialog = dialogService.Show<OffertaRigaEdit>($"{title} Riga offerta", parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center }
        );
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var selectedRelated = result.Data as HashSet<OffertaRiga>;
                await UpdateItem();
                //offertaRigaService.Add(Item.Id, selectedRelated?.Select(x => x.Id));
                await tableRelated.ReloadServerData();
            }
            catch (Exception)
            {
                snackbar.Add("Errore durante l'inserimento della riga offerta", Severity.Error);
            }
        }
    }

    private async Task DeleteRowOfferta(long idRow)
    {
        if (idRow == 0)
        {
            var parameter = new DialogParameters();
            parameter.Add("Text", "Id mancante. Cancellazione non possibile");
            var dialogAlert = dialogService.Show<DialogAlert>("Warning", parameter);
            return;
        }
        var parameters = new DialogParameters();
        parameters.Add("Text", "Confermi cancellazione riga offerta?");
        var dialog = dialogService.Show<DialogConfirm>("Conferma operazione", parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        offertaRigaService.Delete(idRow);
    }

    protected async Task UpdateOfferta()
    {
        await SetLoading(true);
        await UpdateItem();
        await SetLoading(false);
    }

    public async Task RedattoreAddizionaleChanged(Agente agente)
    {
        await UpdateOfferta();        
    }

    private async Task OpenCustomers()
    {
        var dialog = dialogService.Show<CustomersSearchView>("Seleziona un cliente",
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedCustomer = result.Data as int?;
            if (selectedCustomer.HasValue)
            {
                SelectedCustomer = await clienteService.FindAsync(selectedCustomer.Value);
                Item.IdCliente = Convert.ToInt32(selectedCustomer.Value);
            }
        }
    }
    private async Task OpenCircuiti()
    {
        var dialog = dialogService.Show<CircuitiSearchView>("Seleziona un circuito",
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedCircuito = result.Data as string;
            if (!string.IsNullOrWhiteSpace(selectedCircuito))
            {
                SelectedCircuito = await cirComService.FindAsync(selectedCircuito);
                Item.CodiceInterno = selectedCircuito;
            }
        }
    }
    private async Task OpenSpessoreMateriale(string title, string fieldName)
    {
        var parameters = new DialogParameters<GenericTableRicerca> { { x => x.TableName, "SpessoreMateriale" }, { x => x.KeyName, "Id" }, { x => x.DescriptionName, "Descrizione" } };
        var dialog = dialogService.Show<GenericSearchView>(title,
        parameters,
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedSpessoreId = result.Data as long?;
            if (selectedSpessoreId.HasValue)
            {
                if (fieldName.Equals("SpessoreMateriale", StringComparison.InvariantCultureIgnoreCase))
                {
                    SelectedSpessoreMateriale = await genericService.FindAsync(selectedSpessoreId.Value);
                    Item.SpessoreFinale = selectedSpessoreId;
                }
                else if (fieldName.Equals("SpessoreInnerLayer", StringComparison.InvariantCultureIgnoreCase))
                {
                    Item.SpessoreInnerLayer = selectedSpessoreId;
                    SelectedSpessoreInnerLayer = await genericService.FindAsync(selectedSpessoreId.Value);
                }
            }
        }
    }

    private async Task OpenSpessoreRame(string title, string fieldName)
    {
        var parameters = new DialogParameters<GenericTableRicerca> { { x => x.TableName, "SpessoreRame" }, { x => x.KeyName, "Id" }, { x => x.DescriptionName, "Descrizione" } };
        var dialog = dialogService.Show<GenericSearchView>(title, parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, 
                CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedSpessoreId = result.Data as long?;
            if (selectedSpessoreId.HasValue)
            {
                if (fieldName.Equals("SpessRame", StringComparison.InvariantCultureIgnoreCase))
                {
                    Item.SpessRame = selectedSpessoreId;
                    SelectedSpessoreRame = await genericService.FindAsync(selectedSpessoreId.Value);
                }

                if (fieldName.Equals("SpessRameInnerLayer", StringComparison.InvariantCultureIgnoreCase))
                {
                    Item.SpessRameInnerLayer = selectedSpessoreId;
                    SelectedSpessoreRameInner = await genericService.FindAsync(selectedSpessoreId.Value);
                }
            }
        }
    }

    private async Task OpenStrati(string title)
    {
        var parameters = new DialogParameters<GenericTableRicerca> { { x => x.TableName, "TipoProdotto" }, { x => x.KeyName, "Id" }, { x => x.DescriptionName, "Descrizione" } };
        var dialog = dialogService.Show<GenericSearchView>(title, parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, 
                CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedStratiId = result.Data as long?;
            if (selectedStratiId.HasValue)
            {
                SelectedNumeroStrati = await genericService.FindAsync(selectedStratiId.Value);
                Item.IdTipoProdotto = selectedStratiId;
            }
        }
    }
    private async Task OpenTipologiaProdotto(string title, int? idLingua = null)
    {
        var parameters = new DialogParameters<GenericTableRicerca> { 
            { x => x.TableName, "TipoRigido" }, 
            { x => x.KeyName, "Id" }, 
            { x => x.DescriptionName, "Descrizione" }, 
            { x => x.IdLingua, idLingua.HasValue ? idLingua.Value : null } 
        };
        var dialog = dialogService.Show<GenericSearchView>(title, parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, 
                CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedTipologiaPrId = result.Data as long?;
            if (selectedTipologiaPrId.HasValue)
            {
                SelectedNumeroStrati = await genericService.FindAsync(selectedTipologiaPrId.Value, idLingua);
                Item.IdTipoProdotto = selectedTipologiaPrId;
            }
        }
    }
    private async Task OpenFinituraSuperficiale(string title, int? idLingua = null)
    {
        var parameters = new DialogParameters<GenericTableRicerca> { 
            { x => x.TableName, "FinituraSuperficialeDesc" }, 
            { x => x.KeyName, "Id" }, 
            { x => x.DescriptionName, "Descrizione" }, 
            { x => x.IdLingua, idLingua.HasValue ? idLingua.Value : null } 
        };
        var dialog = dialogService.Show<GenericSearchView>(title, parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, 
                CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedFinSuperfId = result.Data as long?;
            if (selectedFinSuperfId.HasValue)
            {
                SelectedFinituraSuperficiale = await genericService.FindAsync(selectedFinSuperfId.Value, idLingua);
                Item.IdTipoProdotto = selectedFinSuperfId;
            }
        }
    }

    private async Task<IEnumerable<GenericEntity>> SearchGenericMateriale(string descrizione)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<GenericEntity>();
    }
    private async Task<IEnumerable<GenericEntity>> SearchGenericRame(string descrizione)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<GenericEntity>();
    }
    private async Task<IEnumerable<GenericEntity>> SearchGenericNumeroStrati(string descrizione)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<GenericEntity>();
    }
    private async Task<IEnumerable<GenericEntity>> SearchGenericTipologiaProdotto(string descrizione)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<GenericEntity>();
    }
    
    private async Task SpessoreMaterialeChanged(GenericEntity? item)
    {
        SelectedSpessoreMateriale = item;
        Item.SpessoreFinale = SelectedSpessoreMateriale?.Id;
    }
    
    private async Task SpessoreRameChanged(GenericEntity? item)
    {
        SelectedSpessoreRame = item;
        Item.SpessRame = SelectedSpessoreRame?.Id;
    }
        
    private async Task SpessoreInnerChanged(GenericEntity? item)
    {
        SelectedSpessoreInnerLayer = item;
        Item.SpessoreInnerLayer = SelectedSpessoreInnerLayer?.Id;
    }
    
    private async Task SpessoreRameInnerChanged(GenericEntity? item)
    {
        SelectedSpessoreRameInner = item;
        Item.SpessRameInnerLayer = SelectedSpessoreRameInner?.Id;
    }
    
    private async Task TipologiaProdottoChanged(GenericEntity? item)
    {
        SelectedTipologiaProdotto = item;
        Item.IdTipoRigidoDf = SelectedTipologiaProdotto?.Id;
    }
    private async Task NumeroStratiChanged(GenericEntity? item)
    {
        SelectedNumeroStrati = item;
        Item.IdTipoProdotto = SelectedNumeroStrati?.Id;
    }
    private async Task FinituraSuperficialeChanged(GenericEntity? item)
    {
        SelectedNumeroStrati = item;
        Item.IdTipoProdotto = SelectedNumeroStrati?.Id;
    }

    private async Task<IEnumerable<CliCom>> SearchCustomer(string value)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<CliCom>();

    }
    private async Task<IEnumerable<CirCom>> SearchCircuito(string value)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<CirCom>();

    }

    private async Task CustomerChanged(CliCom? item)
    {
        SelectedCustomer = item;
        Item.IdCliente = (int)SelectedCustomer?.Id;
    }
    
    private async Task CircuitoChanged(CirCom? item)
    {
        SelectedCircuito = item;
        Item.CodiceInterno = SelectedCircuito?.CodiceInterno;
    }
    
    protected async Task ExportPdf()
    {
        snackbar.Add("Sto generando il PDF, attendere prego", Severity.Info);
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "api/pdf");

        var html = BuildHtml(Item.CodiceInterno, Item.Note);
        requestMessage.Content = new StringContent(html);
        var response = await httpClient.SendAsync(requestMessage);
        var url = await response.Content.ReadAsStringAsync();
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private string BuildHtml(string htmlTitle, string htmlContent)
    {
        string t = @"<!DOCTYPE html>
<html>
<body>
<h2>
    @title
</h2>
    <hr>
    @body
</body>
</html>";
        t = t.Replace("@title", htmlTitle);
        return t.Replace("@body", htmlContent);
    }

}
