@page "/offerta/edit/{Id:long}"
@page "/offerta/new"

@using OfferteWeb.Components.SearchComponents
@using OfferteWeb.Models
@using OfferteWeb.Pages.ListViews;
@using OfferteWeb.Services
@using OfferteWeb.Shared
@using System.Net;
@using System.Net.Http.Headers;
@using System.Text.RegularExpressions;
@using System.Text;
@using TinyMCE.Blazor;
@using OfferteWeb.Components;

@inherits BaseEditPage<Offerta>;
@inject HttpClient httpClient
@inject IDialogService dialogService;
@inject IMailService mailService
@inject IOffertaService offertaService
@inject IOffertaRigaService offertaRigaService
@inject IAgenteService agenteService;
@inject IGenericEntityService genericService;
@inject NavigationManager navigationManager;
@inject ISnackbar snackbar;
@inject EntitiesFactory factory;
@inject IFileService fileService;
@inject IJSRuntime jsRuntime;
@inject IClienteService clienteService;
@inject ICirComService cirComService;
@inject AppConfiguration appConfiguration;

<Loading IsLoading=@IsLoading></Loading>
<InputFile id="fileInput" OnChange="UploadFiles" hidden multiple></InputFile>
@if (Item != null)
{
    <OfferteWeb.Components.EditPageHeader Modifica="@InModifica" Entita="@UiEntityName"></OfferteWeb.Components.EditPageHeader>
    <MudForm @ref="form" @bind-IsValid="@isValid" @bind-Errors="@errors">
        <MudGrid Spacing="1">
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.Id" Label="Numero offerta"></MudTextField>
             </MudItem>
             <MudItem xs="12" sm="6" md="3">
                <div style="display:flex; margin-bottom:10px;flex-direction:column">
                    <div style="display:flex; flex-direction:row;align-items:center">
                        <MudText Style="margin-right:10px" Typo="Typo.h5">Utente</MudText>
                        <MudSelect Style="max-width: 300px;flex-grow:0" Clearable Variant=Variant.Outlined ToStringFunc="@(e=> e==null?null : $"{e.Nome} {e.Cognome}")" T="Agente" Label="Utente" MultiSelection="false" Value="SelectedUtente">
                             @foreach (var r in Redattori)
                            {
                                <MudSelectItem T="Agente" Value="@r">@($"{r.Nome} {r.Cognome}")</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </div>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.Listino" Label="Listino"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
            </MudItem>
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" style="width: calc(100%); min-height: 600px">
                <MudTabPanel Text="Dati generali">
                    <div style="display: flex; flex-direction: column">
                    <div style="display: flex">
                         <MudItem xs="12" sm="6" md="3" lg="3">
                             <div style="display:flex; margin-bottom:10px;flex-direction:column">
                                 <div style="display:flex; flex-direction:row;align-items:center">
                                     <MudText Style="margin-right:10px" Typo="Typo.h5">Agente</MudText>
                                     <MudSelect Style="max-width: 300px;flex-grow:0" Clearable Variant=Variant.Outlined ToStringFunc="@(e=> e==null?null : $"{e.Nome} {e.Cognome}")" T="Agente" Label="Agente" MultiSelection="false" Value="SelectedAgente" ValueChanged="RedattoreAddizionaleChanged">
                                         @foreach (var r in Redattori)
                                        {
                                            <MudSelectItem T="Agente" Value="@r">@($"{r.Nome} {r.Cognome}")</MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                            </div>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudDatePicker Variant="Variant.Outlined" Date="Item.DataOfferta" DateChanged="GetDataOfferta" Label="Data Offerta"></MudDatePicker>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6" lg="6">
                            <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.RevisioneDocumento" Label="Revisione"></MudTextField>
                        </MudItem>
                    </div>
                    <div style="display: flex">
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.MatricolCliente" Label="Matricola"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <div style="display:flex; flex-direction:row;align-items: center;">
                                <MudAutocomplete T="CirCom"
                                                MinCharacters="3"
                                                MaxItems="20"
                                                Immediate="false" 
                                                Label="Codice interno"
                                                Value="@SelectedCircuito"
                                                ValueChanged="CircuitoChanged"
                                                SearchFunc="@SearchCircuito"
                                                Variant="Variant.Outlined" 
                                                ShowProgressIndicator="true"
                                                AdornmentIcon="null"
                                                ToStringFunc="@(e=> e==null ? null : e.CodiceInterno)">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            Nessun elemento trovato
                                        </MudText>
                                    </NoItemsTemplate>
                                </MudAutocomplete>
                                <MudIconButton aria-label="Accedere a ricerca circuiti" Icon="@Icons.Filled.Search" OnClick="OpenCircuiti"></MudIconButton>
                            </div>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <div style="display:flex; flex-direction:row;align-items: center;">
                                <MudAutocomplete T="CliCom"
                                                MinCharacters="3"
                                                MaxItems="20"
                                                Immediate="false" Label="Cliente"
                                                Value="@SelectedCustomer"
                                                ValueChanged="CustomerChanged"
                                                SearchFunc="@SearchCustomer"
                                                Variant="Variant.Outlined" 
                                                ShowProgressIndicator="true"
                                                AdornmentIcon="null"
                                                ToStringFunc="@(e=> e==null?null : e.RagioneSociale)">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            Nessun elemento trovato
                                        </MudText>
                                    </NoItemsTemplate>
                                </MudAutocomplete>
                                <MudIconButton aria-label="Bottone per accedere a ricerca clienti" Icon="@Icons.Filled.Search" OnClick="OpenCustomers"></MudIconButton>
                            </div>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect Clearable Variant="Variant.Outlined" @bind-Value="Item.IdValuta" Label="Valuta">
                                @if (Valutas != null)
                                {
                                    @foreach (var v in Valutas)
                                    {
                                        <MudSelectItem T="long?" Value="@v.Id">@v.DescrBreve</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    </div>
                    <div style="display: flex">
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.FormaDiPagamento" Label="Forma di pagamento"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.IdTrasporto" Label="Trasporto"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudTextField Required Variant="Variant.Outlined" @bind-Value="Item.CondizioniResa" Label="Condizioni di resa"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3" lg="3">
                            <MudDatePicker Variant="Variant.Outlined" Date="Item.DataScadenzaOfferta" DateChanged="GetDataScadenza" Label="Scadenza Offerta"></MudDatePicker>
                        </MudItem>
                    </div>
                    <div style="display: flex">
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect Clearable Required Variant="Variant.Outlined" @bind-Value="Item.StatoOfferta" Label="Stato" AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem T=byte? Value="@StatoOfferta.Inserita.Item1">@StatoOfferta.Inserita.Item2</MudSelectItem>
                                <MudSelectItem T=byte? Value="@StatoOfferta.Accettata.Item1">@StatoOfferta.Accettata.Item2</MudSelectItem>
                                <MudSelectItem T=byte? Value="@StatoOfferta.Rifiutata.Item1">@StatoOfferta.Rifiutata.Item2</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect Clearable Variant="Variant.Outlined" @bind-Value="Item.IdTipoProdotto" Label="Laminato base">
                            @if (TipoProdottos != null)
                            {
                                @foreach (var pt in TipoProdottos)
                                {
                                    <MudSelectItem T="long?" Value="@pt.Id">@pt.Descrizione</MudSelectItem>
                                }
                            }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs=12 sm=12 md=6>
                            <div style="display:flex; justify-content:space-around; column-gap:5vh">
                                <MudCheckBox @bind-Checked="Item.FineLine" Label="Fineline"></MudCheckBox>
                                <MudCheckBox @bind-Checked="@Item.PressFit" Label="PressFit"></MudCheckBox>
                                <MudCheckBox @bind-Checked="Item.MicroForatura" Label="Microforature"></MudCheckBox>
                                <MudCheckBox @bind-Checked="Item.ImpedenzaControllata" Label="Impedenza controllata"></MudCheckBox>
                            </div>
                        </MudItem>
                    </div>
                    <div style="display: flex">
                        <MudItem xs="12" sm="6" md="3">
                            <div style="display:flex; flex-direction:row;align-items: center;">
                                <MudAutocomplete T="GenericEntity"
                                               MinCharacters="3"
                                               MaxItems="20"
                                               Immediate="false" Label="Spessore materiale"
                                               Value="@SelectedSpessoreInnerLayer"
                                               ValueChanged="SpessoreInnerLayerChanged"
                                               SearchFunc="@SearchGenericInnerLayer"
                                               Variant="Variant.Outlined" ShowProgressIndicator="true"
                                               ToStringFunc="@(e => e==null ? null : e.Descrizione)">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            Nessun elemento trovato
                                        </MudText>
                                    </NoItemsTemplate>
                                </MudAutocomplete>
                                <MudIconButton aria-label="Accedere a ricerca Sepssore" Icon="@Icons.Filled.Search" OnClick="OpenSpessoreInnerLayer"></MudIconButton>
                            </div>
                        </MudItem>                    
                    </div>
                    <div style="display: flex">
                        <MudPaper Style="padding:10px; width:100%" Outlined="true" Elevation="1">
                            <MudItem xs="12" sm="12" md="6">
                                <div style="display:flex; margin-bottom:10px">
                                    <MudText Style="margin-right:10px" Typo="Typo.h5">Allegati (Gerber file)</MudText>
                                    @if (loadingFile)
                                    {
                                        <MudProgressCircular Indeterminate></MudProgressCircular>
                                    }
                                    else
                                    {
                                        <MudButton HtmlTag="label"
                                                   Disabled=@(Item?.Id == 0)
                                                   Size="Size.Small"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Filled.CloudUpload"
                                                   for="fileInput">
                                            Carica
                                        </MudButton>
                                    }
                                </div>
                            </MudItem>
                        </MudPaper>
                    </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Far east">
                    <MudText>Content Far east</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Righe offerta">
                    <MudPaper Style="padding:10px; width:100%" Outlined="true" Elevation="1">
                        <MudItem xs="12">
                            <div style="display:flex; margin-bottom:10px">
                                <MudText Style="margin-right:10px" Typo="Typo.h5">Righe offerta</MudText>
                                <MudButton HtmlTag="label"
                                           Disabled=@(Item?.Id == 0)
                                           Size="Size.Small"
                                           Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Filled.Link"
                                           OnClick="(() => OpenRowOfferta(0))">
                                    Inserisci una riga
                                </MudButton>
                            </div>
                            <MudTable @ref="tableRelated" T="OffertaRiga" Dense ServerData="@(new Func<TableState, Task<TableData<OffertaRiga>>>(RigaReload))" Hover="true" RowsPerPage="10" Bordered="true" Striped="true">
                                <HeaderContent>
                                     <MudTh>Quantità</MudTh>
                                     <MudTh>Campione</MudTh>
                                     <MudTh>Giorni di consegna</MudTh>
                                     <MudTh>Data quotazione</MudTh>
                                     <MudTh></MudTh>
                                     <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>
                                        <MudText>@context.Quantita</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.Campione</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.GiorniDiConsegna</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudText>@context.DataQuotazione</MudText>
                                    </MudTd>
                                    <MudTd>
                                        <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="(() => DeleteRowOfferta(context.Id))">Elimina</MudButton>
                                    </MudTd>
                                    <MudTd>
                                        <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="(()=> OpenRowOfferta(context.Id))">Modifica</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[]{15, 50, 100}" />
                                </PagerContent>
                                <NoRecordsContent>
                                    Nessun elemento presente
                                </NoRecordsContent>
                            </MudTable>
                        </MudItem>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="Tab Disabled" Disabled="true">
                    <MudText>Content disabled</MudText>
                </MudTabPanel>
            </MudTabs>
        </MudGrid>
        <MudGrid Style="padding-bottom:50px" Spacing="1">
            <MudItem xs=12 sm=6 md=3>
                <MudTextField Variant="Variant.Outlined" Disabled=true @bind-Value="Item.IdUtente" Label="Utente Inserimento"></MudTextField>
            </MudItem>
            <MudItem xs=12 sm=6 md=3>
                <MudTextField Variant="Variant.Outlined" Disabled=true @bind-Value="Item.DataUltimaModifica" Label="Data ultima modifica"></MudTextField>
            </MudItem>
        </MudGrid>
        <OfferteWeb.Components.EditPageFooter Modifica="@InModifica" Entita="@UiEntityName" DeleteClicked="DeleteItem" AddClicked="AddItem" UpdateClicked="UpdateOfferta"></OfferteWeb.Components.EditPageFooter>
    </MudForm>
}
@code {
    private readonly string UiEntityName = "Offerta";
    private string? newTag;
    private IEnumerable<TipoProdotto> TipoProdottos { get; set; }
    private IEnumerable<Valuta> Valutas { get; set; }
    private bool loadingFile = false;
    //MudTextField<string>? tagAddTextField;
    Agente? SelectedAgente;
    Agente? SelectedUtente;
    GenericEntity? SelectedSpessoreInnerLayer;
    MudTable<OffertaRiga>? tableRelated;
    IEnumerable<Agente> Redattori { get; set; }
    CliCom? SelectedCustomer;
    CirCom? SelectedCircuito;

    protected override async Task OnInitializedAsync()
    {
        httpClient.BaseAddress = new Uri(navigationManager.BaseUri);
        searchService = offertaService;
        updateService = offertaService;
        Redattori = agenteService.Search(new AgenteSearchModel());

        if (InModifica == true)
        {
            Item = offertaService.Find(Id);
            SelectedAgente = Redattori.Where(x => x.Id == Item.IdAgente).FirstOrDefault();
            SelectedUtente = Redattori.Where(x => x.Id == Item.IdUtente).FirstOrDefault();
        }
        else
        {
            Item = CreateInstance();
            Item.IdAgente = State.User != null ? State.User.Id : 0;
            Item.StatoOfferta = StatoOfferta.Inserita.Item1;
        }
        await base.OnInitializedAsync();
    }

    private async Task<TableData<Offerta>> ServerReload(TableState state)
    {
        await SetLoading(true);
        PagerModel pm = new();
        pm.Take = state.PageSize;
        pm.Skip = state.Page * state.PageSize;
        OffertaSearchModel model = new();
        model.Id = Item.Id;
        var pagedInfo = offertaService.SearchPaged(model, false);
        var categoriesPaged = pagedInfo.Item1;
        var totalItems = pagedInfo.Item2;
        await SetLoading(false);
        return new TableData<Offerta>() { TotalItems = totalItems, Items = categoriesPaged };
    }

    private async Task<TableData<OffertaRiga>> RigaReload(TableState state)
    {
        OffertaRigaSearchModel model = new();
        model.IdOfferta = Item.Id;

        var righe = offertaRigaService.SearchPaged(model, false);

        return new TableData<OffertaRiga>() { TotalItems = righe.Item2, Items = righe.Item1 }; ;
    }

    private void GetDataOfferta(DateTime? value)
    {
        Item.DataOfferta = value ?? DateTime.Now;
    }
    
    private void GetDataScadenza(DateTime? value)
    {
        Item.DataScadenzaOfferta = value ?? DateTime.Now;
    }

    private void OpenOfferta(long newId)
    {
        navigationManager.NavigateTo($"/offerta/edit/{newId}", true);
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        await SetLoading(true);
        loadingFile = true;
        try
        {
            //         foreach (var file in e.GetMultipleFiles())
            //         {
            //             PostAttachment? myDocument = factory.Create<PostAttachment>();
            //             var extension = Path.GetExtension(file.Name);
            //             var fileName = Regex.Replace(file.Name, @"[^\w\.@-]", "", RegexOptions.None, TimeSpan.FromSeconds(1.5)).Replace(" ", "_");
            //             myDocument.Name = fileName;
            //             myDocument.PostId = Item.Id;
            //             var externalId = await postAttachmentService.Add(myDocument);

            //             byte[] fileContent;
            //             var stream = file.OpenReadStream(Int64.MaxValue);
            //             MemoryStream ms = new MemoryStream();
            //             await stream.CopyToAsync(ms);
            //             stream.Close();
            //             fileContent = ms.ToArray();

            //             var result = await azureFileService.WriteFile(externalId, fileContent, extension);
            //             if (result)
            //             {
            //                 Item!.PostAttachment.Add(myDocument);
            //                 await UpdateOfferta();
            //             }
            //             else
            //             {
            //                 snackbar.Add("Errore caricamento file", Severity.Error);
            //             }
            //         }
        }
        finally
        {
            loadingFile = false;
            await SetLoading(false);
        }
    }

    private async Task OpenRowOfferta(long idRow)
    {
        OffertaRiga riga = new OffertaRiga();
        string title = "Inserisci";
        if (idRow != 0)
        {
            title = "Modifica";
        }
        var parameters = new DialogParameters { ["Id"] = idRow };
        var dialog = dialogService.Show<OffertaRigaEdit>($"{title} Riga offerta", parameters,
            new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center }
        );
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var selectedRelated = result.Data as HashSet<OffertaRiga>;
                await UpdateItem();
                //offertaRigaService.Add(Item.Id, selectedRelated?.Select(x => x.Id));
                await tableRelated.ReloadServerData();
            }
            catch (Exception)
            {
                snackbar.Add("Errore durante l'inserimento della riga offerta", Severity.Error);
            }
        }
    }

    private async Task DeleteRowOfferta(long idRow)
    {
        if (idRow == 0)
        {
            var parameter = new DialogParameters();
            parameter.Add("Text", "Id mancante. Cancellazione non possibile");
            var dialogAlert = dialogService.Show<DialogAlert>("Warning", parameter);
            return;
        }
        var parameters = new DialogParameters();
        parameters.Add("Text", "Confermi cancellazione riga offerta?");
        var dialog = dialogService.Show<DialogConfirm>("Conferma operazione", parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        offertaRigaService.Delete(idRow);
    }

    protected async Task UpdateOfferta()
    {
        await SetLoading(true);
        await UpdateItem();
        await SetLoading(false);
    }

    public async Task RedattoreAddizionaleChanged(Agente agente)
    {
        await UpdateOfferta();        
    }

    private async Task OpenCustomers()
    {
        var dialog = dialogService.Show<CustomersSearchView>("Seleziona un cliente",
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedCustomer = result.Data as int?;
            if (selectedCustomer.HasValue)
            {
                SelectedCustomer = await clienteService.FindAsync(selectedCustomer.Value);
                Item.IdCliente = Convert.ToInt64(selectedCustomer.Value);
            }
        }
    }
    private async Task OpenCircuiti()
    {
        var dialog = dialogService.Show<CircuitiSearchView>("Seleziona un circuito",
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedCircuito = result.Data as string;
            if (!string.IsNullOrWhiteSpace(selectedCircuito))
            {
                SelectedCircuito = await cirComService.FindAsync(selectedCircuito);
                Item.CodiceInterno = selectedCircuito;
            }
        }
    }
    private async Task OpenSpessoreInnerLayer()
    {
        var dialog = dialogService.Show<GenericSearchView>("Seleziona uno spessore Materiale",
        new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, DisableBackdropClick = true, CloseButton = true, Position = DialogPosition.Center });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedSpessoreId = result.Data as long?;
            if (selectedSpessoreId.HasValue)
            {
                SelectedSpessoreInnerLayer = await genericService.FindAsync(selectedSpessoreId.Value);
                Item.SpessoreInnerLayer = selectedSpessoreId;
            }
        }
    }

    private async Task<IEnumerable<GenericEntity>> SearchGenericInnerLayer(string descrizione)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<GenericEntity>();
    }
    private async Task SpessoreInnerLayerChanged(GenericEntity? item)
    {
        SelectedSpessoreInnerLayer = item;
        Item.SpessoreInnerLayer = SelectedSpessoreInnerLayer?.Id;
    }
    
    private async Task<IEnumerable<CliCom>> SearchCustomer(string value)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<CliCom>();

    }
    private async Task<IEnumerable<CirCom>> SearchCircuito(string value)
    {
        PagerModel model = new();
        model.Skip = 0;
        model.Take = 10;
        //return categoriesService.SearchByString(value, model, true, false);

        return Enumerable.Empty<CirCom>();

    }

    private async Task CustomerChanged(CliCom? item)
    {
        SelectedCustomer = item;
        Item.IdCliente = (long)SelectedCustomer?.Id;
    }
    
    private async Task CircuitoChanged(CirCom? item)
    {
        SelectedCircuito = item;
        Item.CodiceInterno = SelectedCircuito?.CodiceInterno;
    }
    
    protected async Task ExportPdf()
    {
        snackbar.Add("Sto generando il PDF, attendere prego", Severity.Info);
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "api/pdf");

        var html = BuildHtml(Item.CodiceInterno, Item.Note);
        requestMessage.Content = new StringContent(html);
        var response = await httpClient.SendAsync(requestMessage);
        var url = await response.Content.ReadAsStringAsync();
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private string BuildHtml(string htmlTitle, string htmlContent)
    {
        string t = @"<!DOCTYPE html>
<html>
<body>
<h2>
    @title
</h2>
    <hr>
    @body
</body>
</html>";
        t = t.Replace("@title", htmlTitle);
        return t.Replace("@body", htmlContent);
    }

}
